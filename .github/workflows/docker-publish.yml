name: Build & Publish Docker Image

on:
  push:
    branches: [ "main" ]   # merge to main -> build "latest" + "sha" tags
  release:
    types: [published]     # when a versioned release is published -> build versioned tags

permissions:
  contents: write
  packages: read

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Generate tags/labels depending on the event (push to main vs release)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/YOUR_IMAGE_NAME
          tags: |
            type=raw,value=latest,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
            type=sha,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
            type=semver,pattern={{version}},value=${{ github.event.release.tag_name }},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}}.{{minor}},value=${{ github.event.release.tag_name }},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}},value=${{ github.event.release.tag_name }},enable=${{ github.event_name == 'release' }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}

      # Build & push (multi-arch example; remove platforms if not needed)
      - name: Build and push
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # If this is a release, also attach a downloadable image tarball to the Release
      - name: Build OCI tar for Release asset (release only)
        if: ${{ github.event_name == 'release' }}
        run: |
          mkdir -p dist
          # Rebuild once to produce a single-file artifact (OCI tar). This is fast due to cache.
          docker buildx build \
            --file ./Dockerfile \
            --output type=oci,dest=dist/image-oci.tar \
            .
          echo "Generated dist/image-oci.tar"

      - name: Upload image tar to GitHub Release (release only)
        if: ${{ github.event_name == 'release' }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/image-oci.tar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
